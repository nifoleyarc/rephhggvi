import {
  uploadToCloudinary,
  deleteFromCloudinary,
  checkCloudinaryConfig
} from './cloudinary.js'

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é –¥–ª—è —Å—Ç—Ä–∏–º–∞ –∏–∑ Telegram URL
 * @param {string} telegramUrl - URL –ø–æ—Å—Ç–∞ –≤ Telegram
 * @param {number} retries - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * @returns {Promise<object|null>} - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–≤—å—é –∏–ª–∏ null
 */
export async function generateThumbnailFromTelegramUrl(telegramUrl, retries = 3) {
  console.log(`üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –¥–ª—è: ${telegramUrl}`)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Cloudinary
  if (!checkCloudinaryConfig()) {
    console.error('‚ùå Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥')
    return await generateThumbnailFallback(telegramUrl, retries)
  }
  
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`   üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}`)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
      if (attempt > 1) {
        const delay = 1000 * attempt
        console.log(`   ‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ ${delay}–º—Å`)
        await new Promise(resolve => setTimeout(resolve, delay))
      }
      
      // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã Telegram
      const imageUrl = await extractImageFromTelegramUrl(telegramUrl)
      
      if (!imageUrl) {
        console.log(`   ‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ–ø—ã—Ç–∫–µ ${attempt}`)
        if (attempt === retries) return null
        continue
      }
      
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl}`)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Cloudinary
      const cloudinaryResult = await uploadToCloudinary(imageUrl, {
        context: {
          source: 'telegram',
          'original-telegram-url': telegramUrl,
          'generated-at': new Date().toISOString()
        }
      })
      
      if (cloudinaryResult) {
        console.log(`   üéâ –ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Cloudinary`)
        return {
          url: cloudinaryResult.url,
          publicId: cloudinaryResult.publicId,
          source: 'cloudinary',
          originalUrl: imageUrl,
          telegramUrl: telegramUrl,
          width: cloudinaryResult.width,
          height: cloudinaryResult.height,
          format: cloudinaryResult.format,
          bytes: cloudinaryResult.bytes,
          createdAt: new Date()
        }
      } else {
        console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Cloudinary, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}`)
        if (attempt === retries) {
          console.log(`   üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥`)
          return await generateThumbnailFallback(telegramUrl, 1) // –û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ fallback
        }
      }
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ ${attempt}: ${error.message}`)
      if (attempt === retries) {
        console.log(`   üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–µ—É–¥–∞—á`)
        return await generateThumbnailFallback(telegramUrl, 1) // –û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ fallback
      }
    }
  }
  
  return null
}

/**
 * Fallback –º–µ—Ç–æ–¥ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
 * @param {string} telegramUrl - URL –ø–æ—Å—Ç–∞ –≤ Telegram
 * @param {number} retries - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * @returns {Promise<object|null>} - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–≤—å—é –∏–ª–∏ null
 */
async function generateThumbnailFallback(telegramUrl, retries = 3) {
  console.log(`üîÑ Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –¥–ª—è: ${telegramUrl}`)
  
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`   üîÑ Fallback –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}`)
      
      if (attempt > 1) {
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt))
      }
      
      const imageUrl = await extractImageFromTelegramUrl(telegramUrl)
      
      if (imageUrl) {
        console.log(`   ‚úÖ Fallback –ø—Ä–µ–≤—å—é –Ω–∞–π–¥–µ–Ω–æ: ${imageUrl}`)
        return {
          url: imageUrl,
          source: 'telegram_direct',
          originalUrl: imageUrl,
          telegramUrl: telegramUrl,
          createdAt: new Date()
        }
      }
      
    } catch (error) {
      console.error(`   ‚ùå Fallback –æ—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ ${attempt}: ${error.message}`)
    }
  }
  
  console.log(`   üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã`)
  return null
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Telegram —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {string} telegramUrl - URL –ø–æ—Å—Ç–∞ –≤ Telegram
 * @returns {Promise<string|null>} - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ null
 */
async function extractImageFromTelegramUrl(telegramUrl) {
  const controller = new AbortController()
  const timeoutId = setTimeout(() => controller.abort(), 15000) // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
  
  try {
    const response = await fetch(telegramUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
      },
      signal: controller.signal
    })
    
    clearTimeout(timeoutId)
    
    if (!response.ok) {
      console.log(`   ‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status}`)
      return null
    }
    
    const html = await response.text()
    
    // –ò—â–µ–º Open Graph –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
    const patterns = [
      /<meta[^>]*property=["\']og:image["\'][^>]*content=["\']([^"\']+)["\'][^>]*>/i,
      /<meta[^>]*content=["\']([^"\']+)["\'][^>]*property=["\']og:image["\'][^>]*>/i,
      /<meta[^>]*name=["\']twitter:image["\'][^>]*content=["\']([^"\']+)["\'][^>]*>/i,
      /<meta[^>]*name=["\']twitter:image:src["\'][^>]*content=["\']([^"\']+)["\'][^>]*>/i,
      /<meta[^>]*property=["\']og:image:url["\'][^>]*content=["\']([^"\']+)["\'][^>]*>/i,
    ]
    
    for (const pattern of patterns) {
      const match = html.match(pattern)
      if (match && match[1]) {
        let imageUrl = match[1]
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL
        if (imageUrl.startsWith('//')) {
          imageUrl = 'https:' + imageUrl
        } else if (imageUrl.startsWith('/')) {
          imageUrl = 'https://t.me' + imageUrl
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (imageUrl.includes('http') && !imageUrl.includes('t.me/s/')) {
          return imageUrl
        }
      }
    }
    
    return null
    
  } catch (error) {
    clearTimeout(timeoutId)
    throw error
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–≤—å—é (—É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ –∏–∑ Cloudinary, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ)
 * @param {string} telegramUrl - URL –ø–æ—Å—Ç–∞ –≤ Telegram  
 * @param {object} currentThumbnail - –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–≤—å—é
 * @returns {Promise<object|null>} - –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–≤—å—é –∏–ª–∏ null
 */
export async function updateThumbnail(telegramUrl, currentThumbnail = null) {
  console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è: ${telegramUrl}`)
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ –ø—Ä–µ–≤—å—é –≤ Cloudinary, —É–¥–∞–ª—è–µ–º –µ–≥–æ
  if (currentThumbnail?.publicId && currentThumbnail?.source === 'cloudinary') {
    console.log(`   üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–µ–≤—å—é –∏–∑ Cloudinary: ${currentThumbnail.publicId}`)
    await deleteFromCloudinary(currentThumbnail.publicId)
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–≤—å—é
  return await generateThumbnailFromTelegramUrl(telegramUrl)
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–≤—å—é –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 * @param {string|object} thumbnailData - –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–≤—å—é
 * @returns {object} - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–≤—å—é
 */
export function normalizeThumbnailData(thumbnailData) {
  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (typeof thumbnailData === 'object' && thumbnailData !== null) {
    return thumbnailData
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ URL - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—ä–µ–∫—Ç
  if (typeof thumbnailData === 'string') {
    return {
      url: thumbnailData,
      source: 'telegram_direct', // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      originalUrl: thumbnailData
    }
  }
  
  return null
} 