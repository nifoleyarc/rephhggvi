import sqlite3 from 'sqlite3'
import { open } from 'sqlite'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const DB_PATH = path.join(__dirname, '../../database.sqlite')

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
export async function createDatabase() {
  const db = await open({
    filename: DB_PATH,
    driver: sqlite3.Database
  })

  // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
  await db.exec('PRAGMA foreign_keys = ON')

  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
  await createTables(db)
  
  return db
}

// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
export async function getDatabase() {
  return await open({
    filename: DB_PATH,
    driver: sqlite3.Database
  })
}

async function createTables(db) {
  // –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  await db.exec(`
    CREATE TABLE IF NOT EXISTS categories (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL UNIQUE,
      tag TEXT NOT NULL UNIQUE,
      description TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `)

  // –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∏–º–æ–≤
  await db.exec(`
    CREATE TABLE IF NOT EXISTS streams (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      telegram_url TEXT,
      stream_date TEXT NOT NULL,
      tags TEXT, -- JSON –º–∞—Å—Å–∏–≤
      categories TEXT, -- JSON –º–∞—Å—Å–∏–≤
      thumbnail_url TEXT,
      thumbnail_source TEXT,
      thumbnail_public_id TEXT, -- Public ID –≤ Cloudinary
      thumbnail_width INTEGER,
      thumbnail_height INTEGER,
      thumbnail_format TEXT,
      thumbnail_bytes INTEGER,
      thumbnail_updated_at DATETIME,
      message_id INTEGER,
      chat_id INTEGER,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `)

  // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ø—ã—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±—Ä—É—Ç-—Ñ–æ—Ä—Å)
  await db.exec(`
    CREATE TABLE IF NOT EXISTS auth_attempts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      ip TEXT NOT NULL,
      attempts INTEGER DEFAULT 0,
      first_attempt DATETIME DEFAULT CURRENT_TIMESTAMP,
      last_attempt DATETIME DEFAULT CURRENT_TIMESTAMP,
      banned_until DATETIME,
      UNIQUE(ip)
    )
  `)

  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  await db.exec(`
    CREATE INDEX IF NOT EXISTS idx_streams_date ON streams(stream_date DESC);
    CREATE INDEX IF NOT EXISTS idx_streams_telegram_url ON streams(telegram_url);
    CREATE INDEX IF NOT EXISTS idx_streams_message ON streams(message_id, chat_id);
    CREATE INDEX IF NOT EXISTS idx_auth_attempts_ip ON auth_attempts(ip);
  `)

  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  await insertDefaultCategories(db)
  
  console.log('‚úÖ Database tables created/verified')
}

async function insertDefaultCategories(db) {
  const defaultCategories = [
    { name: '–û–±—â–µ–Ω–∏–µ / –í–∏–¥–æ—Å—ã', tag: 'just_chatting', description: '–û–±—ã—á–Ω—ã–µ —Å—Ç—Ä–∏–º—ã –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã' },
    { name: '–ò–†–õ —Å—Ç—Ä–∏–º—ã', tag: 'irl', description: '–°—Ç—Ä–∏–º—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏' },
    { name: '–§–∏–ª—å–º—ã / –ú—É–ª—å—Ç–∏–∫–∏', tag: 'movies', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤ –∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤' },
    { name: '–ò–≥—Ä–æ–≤—ã–µ —Å—Ç—Ä–∏–º—ã', tag: 'gaming', description: '–ò–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç' },
    { name: '–ö–æ–Ω—Ç–µ–Ω—Ç', tag: 'content', description: '–†–∞–∑–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' },
    { name: '–ú–∞—Ä–∞—Ñ–æ–Ω—ã', tag: 'marathon', description: '–î–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∏–º—ã' },
    { name: '–ö—É–∫–∏–Ω–≥–∏', tag: 'cooking', description: '–ì–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–∏–º–µ' },
    { name: '–®–û–£', tag: 'show', description: '–®–æ—É –ø—Ä–æ–≥—Ä–∞–º–º—ã' }
  ]

  for (const category of defaultCategories) {
    try {
      await db.run(`
        INSERT OR IGNORE INTO categories (name, tag, description)
        VALUES (?, ?, ?)
      `, [category.name, category.tag, category.description])
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      if (!error.message.includes('UNIQUE constraint failed')) {
        console.error('Error inserting default category:', error)
      }
    }
  }

  console.log('‚úÖ Default categories initialized')
}

// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ)
export async function migrateFromMongoDB() {
  // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
  console.log('üì¶ MongoDB migration placeholder - will be implemented separately')
} 