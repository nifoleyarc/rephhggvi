import express from 'express'
import axios from 'axios'

const router = express.Router()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
async function sendMessage(chatId, text, replyMarkup = null) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  
  if (!botToken) {
    console.error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    return false
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`
  
  const payload = {
    chat_id: chatId,
    text: text,
    parse_mode: 'Markdown'
  }

  if (replyMarkup) {
    payload.reply_markup = replyMarkup
  }

  try {
    const response = await axios.post(url, payload)
    return response.data.ok
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data || error.message)
    return false
  }
}

// POST /api/bot - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
router.post('/', async (req, res) => {
  console.log('='.repeat(80))
  console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç Telegram Bot')
  console.log('   –í—Ä–µ–º—è:', new Date().toLocaleString('ru-RU'))
  
  try {
    const update = req.body
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook secret –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    const webhookSecret = process.env.WEBHOOK_SECRET
    if (webhookSecret) {
      const receivedSecret = req.headers['x-telegram-bot-api-secret-token']
      if (receivedSecret !== webhookSecret) {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π webhook secret')
        return res.status(401).json({ error: 'Unauthorized' })
      }
    }
    
    console.log('‚úÖ Webhook secret –ø—Ä–æ–≤–µ—Ä–µ–Ω')
    console.log('üìã –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', Object.keys(update).join(', '))
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    if (!update.message) {
      console.log('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç message')
      return res.status(200).json({ ok: true, message: 'Not a message' })
    }
    
    const message = update.message
    const chatId = message.chat.id
    const text = message.text || ''
    const userId = message.from.id
    const userName = message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} (ID: ${userId})`)
    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start
    if (!text.startsWith('/start')) {
      console.log('‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start')
      return res.status(200).json({ ok: true, message: 'Not a start command' })
    }
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start')
    
    // –ü–æ–ª—É—á–∞–µ–º URL Mini App –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const miniAppUrl = process.env.MINI_APP_URL || 'https://your-mini-app.com'
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage = `üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞—Ä—Ö–∏–≤ —Å—Ç—Ä–∏–º–æ–≤ GENSYXA!

üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`
    
    // –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
    const inlineKeyboard = {
      inline_keyboard: [
        [
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: {
              url: miniAppUrl
            }
          }
        ]
      ]
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const sent = await sendMessage(chatId, welcomeMessage, inlineKeyboard)
    
    if (sent) {
      console.log('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    }
    
    return res.status(200).json({ ok: true, message: 'Start command processed' })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:', error)
    return res.status(500).json({ error: 'Internal server error' })
  }
})

export default router 