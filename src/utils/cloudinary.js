import { v2 as cloudinary } from 'cloudinary'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
})

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Cloudinary –∏–∑ URL
 * @param {string} imageUrl - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
 * @returns {Promise<string|null>} - URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Cloudinary –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
export async function uploadToCloudinary(imageUrl, options = {}) {
  try {
    console.log('üì§ Uploading to Cloudinary:', imageUrl)
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é —Å—Ç—Ä–∏–º–æ–≤
    const defaultOptions = {
      folder: 'stream-thumbnails', // –ü–∞–ø–∫–∞ –≤ Cloudinary
      resource_type: 'image',
      format: 'jpg', // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ jpg –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
      quality: 'auto:good', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
      width: 1280, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
      height: 720, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞  
      crop: 'limit', // –ù–µ –æ–±—Ä–µ–∑–∞–µ–º, —Ç–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∞–µ–º –µ—Å–ª–∏ –±–æ–ª—å—à–µ
      fetch_format: 'auto', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ (WebP, AVIF)
      flags: 'progressive', // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      ...options
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
    const publicId = generatePublicId(imageUrl)
    
    const result = await cloudinary.uploader.upload(imageUrl, {
      ...defaultOptions,
      public_id: publicId,
      overwrite: false, // –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
      unique_filename: true, // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
    })

    console.log('‚úÖ Successfully uploaded to Cloudinary:', result.secure_url)
    
    return {
      url: result.secure_url,
      publicId: result.public_id,
      width: result.width,
      height: result.height,
      format: result.format,
      bytes: result.bytes
    }
    
  } catch (error) {
    console.error('‚ùå Cloudinary upload error:', error.message)
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
    if (error.http_code === 400) {
      console.error('   Invalid image URL or format')
    } else if (error.http_code === 401) {
      console.error('   Cloudinary authentication failed - check API credentials')
    } else if (error.http_code === 420) {
      console.error('   Cloudinary rate limit exceeded')
    }
    
    return null
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Cloudinary
 * @param {string} publicId - Public ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Cloudinary
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
 */
export async function deleteFromCloudinary(publicId) {
  try {
    console.log('üóëÔ∏è Deleting from Cloudinary:', publicId)
    
    const result = await cloudinary.uploader.destroy(publicId)
    
    if (result.result === 'ok') {
      console.log('‚úÖ Successfully deleted from Cloudinary:', publicId)
      return true
    } else {
      console.log('‚ö†Ô∏è Cloudinary delete result:', result.result, 'for', publicId)
      return false
    }
    
  } catch (error) {
    console.error('‚ùå Cloudinary delete error:', error.message)
    return false
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π public_id –¥–ª—è Cloudinary –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} imageUrl - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {string} - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π public_id
 */
function generatePublicId(imageUrl) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
    const url = new URL(imageUrl)
    const pathname = url.pathname
    const filename = pathname.split('/').pop() || 'thumbnail'
    
    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const baseName = filename
      .replace(/\.(jpg|jpeg|png|webp|gif)$/i, '')
      .replace(/[^a-zA-Z0-9-_]/g, '_')
      .slice(0, 50) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const timestamp = Date.now()
    
    return `${baseName}_${timestamp}`
    
  } catch (error) {
    // Fallback –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å URL
    const timestamp = Date.now()
    const random = Math.random().toString(36).substring(2, 8)
    return `thumbnail_${timestamp}_${random}`
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Cloudinary
 * @returns {boolean} - true –µ—Å–ª–∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
 */
export function checkCloudinaryConfig() {
  const requiredEnvVars = [
    'CLOUDINARY_CLOUD_NAME',
    'CLOUDINARY_API_KEY', 
    'CLOUDINARY_API_SECRET'
  ]
  
  const missingVars = requiredEnvVars.filter(varName => !process.env[varName])
  
  if (missingVars.length > 0) {
    console.error('‚ùå Missing Cloudinary environment variables:', missingVars)
    return false
  }
  
  console.log('‚úÖ Cloudinary configuration is valid')
  return true
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Cloudinary
 * @param {string} publicId - Public ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {object} transformations - –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {string} - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL
 */
export function getOptimizedUrl(publicId, transformations = {}) {
  const defaultTransformations = {
    quality: 'auto:good',
    fetch_format: 'auto',
    width: 640,
    height: 360,
    crop: 'fill',
    gravity: 'center',
    ...transformations
  }
  
  return cloudinary.url(publicId, defaultTransformations)
}

export default cloudinary 